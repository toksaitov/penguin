#!/usr/bin/env python
#vim:syntax=python

# penguin - build a custom Linux system
#
# Written while on the road of reading "Linux From Scratch".
#
# Toksaitov Dmitrii Alexandrovich
# Fri Nov 4 16:28:03 KGT 2011

from utils import *

options = {
    'full name'  : 'HZ Lunux'
    'short name' : 'hzl'

    'device' : {
        'path'   : '/dev/sdb',
    }

    'partitions' : [
        {
            'type' : 'ESP',                     # ESP, BIOS Boot, Swap, Root
            'size' : 200                        # In megabytes (1024^2 bytes)
        },
        {
            'type' : 'BIOS Boot',
            'size' : 1
        },
        {
            'type' : 'Swap',
            'size' : 1024
        },
        {
            'type' : 'Root'
            'file system' : 'BTRFS'             # BTRFS or Ext4
        }
    ]
}

stop_if_not_root()
confirm_destructive_operations()

sh('type parted', 'Checking if GNU parted is installed.')

device = options['device']['path']
sh("parted --script '%s' mklabel gpt" % device,
   'Creating the GPT partition scheme on "%s".' % device)

short_name = options['short name']

partitions = options['partitions']
partition_position = 0

for partition_number, partition in enumerate(partitions):
    partition_number += 1
    partition_type = partition['type']

    root_file_system = partition['file system'].lower()
    partition_name, partition_file_system, partition_flag = {
        'ESP'       : ['EFI System partition',  'vfat',           'boot'     ],
        'BIOS Boot' : ['BIOS Boot partition',   'vfat',           'bios_grub'],
        'Swap'      : ['Swap partition',        'linux-swap',     'swap'     ],
        'Root'      : ['Linux filesystem data', root_file_system, 'root'     ]
    }[partition_type]

    start, end =
        position, partition['size'] ? '%dMiB' % position + size : '-1s'

    sh("parted --align optimal --script '%s' mkpart '%s' '%s' '%s'" %
            (device, partition_file_system, start, end),
       'Creating partition #%d of type: "%s".' %
            (partition_number, partition_type))

    sh("parted --script %s name '%s'" %
            (device, partition_number, partition_name),
       'Setting partition #%d name to "%s".' %
            (partition_number, partition_name))

    sh("parted --script '%s' set '%d' '%s' on" %
            (device, partition_number, partition_flag),
       'Setting partition #%d flag "%s".' %
            (partition_number, partition_flag))

    partition_device = device + str(partition_number)
    if partition_file_system == 'vfat':
        sh('type mkfs.vfat', 'Checking if mkdosfs is installed.')
        sh("mkfs.vfat -F 32 '%s'" % partition_device,
           'Creating VFAT file system on device "%s".' % partition_device)
    elif partition_file_system == 'linux-swap':
        sh('type mkswap', 'Checking if util-linux package is installed ' \
           'and mkswap is present.')
        sh("mkswap '%s'" % partition_device,
           'Setting up the Linux swap partition on device "%s".' %
                partition_device)
    elif partition_file_system == 'ext4'
        sh('type mkfs.ext4', 'Checking if e2fsprogs package is installed ' \
           'and mkfs.ext4 is present.')
        sh("mkfs.ext4 '%s'" % partition_device,
           'Creating Ext4 file system on device "%s".' % partition_device)
    elif partition_file_system == 'btrfs'
        sh('type mkfs.btrfs', 'Checking if btrfs-tools package is installed ' \
           'and mkfs.btrfs is present.')
        sh("mkfs.btrfs '%s'" % partition_device,
           'Creating BTRFS file system on device "%s".' % partition_device)

    if partition_type == 'Root':
        partition_mount_point = '/mnt/%s' % short_name
        sh("mkdir --parents --verbose '%s'" % partition_mount_point,
           'Creating a directory for the root file system mount point at ' \
           '"%s".' % partition_mount_point)
        sh("mount -types '%s' '%s' '%s'" %
            (partition_file_system, partition_device, partition_mount_point)),

    # http://developer.apple.com/library/mac/#technotes/tn2166/_index.html
    if partition_type != 'ESP':
        position += 128 # Add space after each partition (excluding ESP) for
                        # system software to manipulate the partition map.

