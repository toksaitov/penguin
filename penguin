#!/usr/bin/env python
#vim:syntax=python

"""Builds a custom Linux system

Written while on the road of reading "Linux From Scratch".

"""

# Toksaitov Dmitrii Alexandrovich
# Fri Nov 4 16:28:03 KGT 2011

import argparse, json
import steps

MAJOR_VERSION, MINOR_VERSION, BUILD_NUMBER = 1, 0, 1

def parse_command_line_arguments():
    """Defines command line arguments and parses provided one.

    Returns parsed arguments in a dictionary.

    """
    argparse.ArgumentParser(description=__doc__)
                            fromfile_prefix_chars='@')

    script_version = '%d.%d.%d' % (MAJOR_VERSION, MINOR_VERSION, BUILD_NUMBER)
    argparse.add_argument('-V', '--version',
                          action='version',
                          version=('%(prog)s ' + script_version))
    argparse.add_argument('-v', '--verbose',
                          help='Print output from all commands.')
    argparse.add_argument('configuration',
                          nargs='?',
                          type=argparse.FileType('r'),
                          help='a JSON configuration file describing a ' \
                               'system to build.')

    parsed_arguments = vars(argparse.parse_args())
    return parsed_arguments

def process_command_line_arguments():
    """Processes command-line arguments and constructs script options from them.

    Returns script options in a dictionary with a system configuration to build.
    System configuration in JSON is parsed from the specified (through
    command-line) file.

    """
    resulting_namespace = parse_command_line_arguments()
    options = json.load(resulting_namespace.configuration)
    options = { 'verbose_output' = resulting_namespace.verbose,
                'configuration'  = options }

    return options

def main():
    """Script entry point"""
    try:
        options = process_command_line_arguments()
        steps.perform(options)
    except Exception as error:
        sys.exit(error)

if __name__ == '__main__': main()

